// Global default params, used in configs
params {
// Workflow flags
    outdir = './results'

  // Boilerplate options
    help = false
    tracedir = "${params.outdir}/pipeline_info"

  // cache option makes it a bit easier to set conda or singularity cacheDir
    cache = ''
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
includeConfig 'conf/nf-ncov-voc.config'
includeConfig 'conf/profiles.config'
includeConfig 'conf/modules.config'


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'nf-ncov-voc'
    author          = 'Muhammad Zohaib Anwar'
    homePage        = 'https://github.com/cidgoh/nf-ncov-voc'
    description     = 'Nextflow wrapped workflow for variant calling on SARS-CoV-2 Vaiants of Concern and Interest'
    mainScript      = 'main.nf'
    nextflowVersion = '>=20.01.0'
    version         = '0.1.1'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
