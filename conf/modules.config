/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    // Clinical
        
    withName: SNPEFF_BUILD {
        ext.args = '-genbank'
    }

    withName: PANGOLIN {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/PANGOLIN" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SEQKIT_GREP {
        ext.args = "-n"
        ext.prefix = { "${pattern.getBaseName()}" }
        ext.suffix = { "fa" }
    }

    withName: BBMAP {
        ext.args = "maxns=${params.maxns} minlength=${params.minlength} addunderscore tossjunk overwrite=true -da"
        
    }

    withName: SEQKIT_STATS {
        ext.args = "--all"
        ext.prefix = { "combined_stats" }
    }

    withName: MINIMAP2_ALIGN {
        ext.args = '-ax asm5'
    }

    withName: SAMTOOLS_SORT {   
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: FREEBAYES{
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/FREEBAYES" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = "-p ${params.ploidy} \
                    -F ${params.var_MinFreqThreshold} \
                    -C 1 \
                    --min-coverage ${params.var_MinDepth} \
                    --pooled-continuous"
        errorStrategy = 'ignore'
    }

    withName: BCFTOOLS_SORT {
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: BCFTOOLS_NORM {
        ext.args = '--output-type v -c w'   
    }
    
    withName: SNPEFF_ANN {
        ext.args = '-formatEff -hgvs1LetterAa -hgvsOld' 
    }
    
    withName: VCFTOGVF {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/VCFTOGVF" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        errorStrategy = 'ignore'
    }

    withName: FUNCTIONALANNOTATION {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/FUNCTIONALANNOTATION" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: VARIANTANNOTATION {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/VARIANTANNOTATION" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MERGE_INDICES {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/MUTATION_INDEX" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MERGE_LOGFILES {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/LOGFILE" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: GVF2TSV {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/SURVEILLANCE/TSV" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    // Wastewater

    withName: WW_FASTP {
        ext.args = '-l 70 -x --cut_tail --cut_tail_mean_quality 20 --detect_adapter_for_pe'
    }
    
    withName: MINIMAP2_ALIGN_HOST{
        ext.args = '-a -xsr'
        
    }

    withName: MINIMAP2_ALIGN_VIRAL{
        ext.args = '-a -xsr'
    }
    
    withName: WW_SAMTOOLS_VIEW {
        ext.args = '-f4 -b'
        ext.prefix = { "${meta.id}.unmapped" }
    }

    withName: WW_IVAR_TRIM { 
        ext.prefix = { "${meta.id}.ivar" }
    }

    withName: WW_SAMTOOLS_SORT {  
        ext.prefix = { "${meta.id}.sorted" }
    }
    
    withName: FREYJA_VARIANTS {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/FREYJA_VARIANTS" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: FREYJA_DEMIX {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/FREYJA_DEMIX" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FREYJA_BOOT {
        publishDir = [
            path: { "${params.outdir}/${params.prefix}/FREYJA_BOOT" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = "--depthcutoff ${params.freyja_boot_depthcutoff}"
        errorStrategy = 'ignore'
    }

}
